/**
 * Gestor de transiciones del men√∫ principal
 * Maneja las animaciones de entrada cuando la aplicaci√≥n est√° lista
 */

class MenuTransitionManager {
    constructor() {
        this.isInitialized = false;
        this.menuContainer = null;
        this.gameTitle = null;
        this.menuOptions = null;
        
        this.init();
    }
    
    init() {
        // Esperar a que el DOM est√© listo
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.setupElements());
        } else {
            this.setupElements();
        }
    }
    
    setupElements() {
        console.log('üîç Buscando elementos del men√∫...');
        
        // Intentar obtener elementos con reintentos m√°s agresivos
        const checkElements = (attempt = 1, maxAttempts = 20) => {
            this.menuContainer = document.querySelector('.menu-container');
            this.gameTitle = document.querySelector('.game-title');
            this.menuOptions = document.querySelector('.menu-options');
            
            console.log(`üìç Intento ${attempt}: Container: ${!!this.menuContainer}, Title: ${!!this.gameTitle}, Options: ${!!this.menuOptions}`);
            
            if (this.menuContainer && this.gameTitle && this.menuOptions) {
                console.log('‚úÖ Todos los elementos del men√∫ encontrados');
                this.setupInitialState();
                return;
            }
            
            if (attempt < maxAttempts) {
                // Reintentar cada 200ms hasta 20 intentos (4 segundos total)
                setTimeout(() => checkElements(attempt + 1, maxAttempts), 200);
            } else {
                console.error('‚ùå No se pudieron encontrar todos los elementos del men√∫ despu√©s de', maxAttempts, 'intentos');
                console.log('üîç Elementos encontrados:', {
                    menuContainer: !!this.menuContainer,
                    gameTitle: !!this.gameTitle,
                    menuOptions: !!this.menuOptions
                });
            }
        };
        
        checkElements();
    }
    
    setupInitialState() {
        // Establecer estado inicial: solo t√≠tulo visible, botones ocultos
        if (this.menuContainer) {
            this.menuContainer.classList.add('initializing');
        }
        
        if (this.gameTitle) {
            this.gameTitle.classList.add('centered');
        }
        
        if (this.menuOptions) {
            this.menuOptions.classList.add('hidden');
        }
        
        console.log('üé≠ Estado inicial del men√∫ configurado');
    }
    
    // M√©todo p√∫blico para forzar configuraci√≥n del estado inicial
    forceSetupInitialState() {
        // Re-buscar elementos por si se perdieron las referencias
        this.menuContainer = document.querySelector('.menu-container');
        this.gameTitle = document.querySelector('.game-title');
        this.menuOptions = document.querySelector('.menu-options');
        
        if (this.menuContainer && this.gameTitle && this.menuOptions) {
            this.setupInitialState();
            return true;
        } else {
            console.warn('üîç No se pudieron encontrar elementos para configurar estado inicial');
            return false;
        }
    }
    
    // M√©todo para activar las transiciones cuando la app est√© lista
    activateTransitions() {
        if (this.isInitialized) return;
        
        // Re-verificar elementos por si se perdieron las referencias
        if (!this.gameTitle || !this.menuOptions || !this.menuContainer) {
            console.log('üîÑ Re-verificando elementos antes de activar transiciones...');
            this.menuContainer = document.querySelector('.menu-container');
            this.gameTitle = document.querySelector('.game-title');
            this.menuOptions = document.querySelector('.menu-options');
        }
        
        if (!this.gameTitle || !this.menuOptions) {
            console.error('‚ùå No se pueden activar transiciones: elementos no encontrados');
            console.log('üîç Estado actual:', {
                menuContainer: !!this.menuContainer,
                gameTitle: !!this.gameTitle,
                menuOptions: !!this.menuOptions
            });
            return;
        }
        
        this.isInitialized = true;
        console.log('üöÄ Activando transiciones del men√∫ principal');
        
        // Remover estado de inicializaci√≥n
        if (this.menuContainer) {
            this.menuContainer.classList.remove('initializing');
            this.menuContainer.classList.add('ready');
        }
        
        // Transici√≥n del t√≠tulo - SIMPLE: solo cambiar las clases
        console.log('üìç Estado inicial clases:', this.gameTitle.className);
        
        // Cambio directo y simple
        this.gameTitle.classList.remove('centered');
        this.gameTitle.classList.add('positioned');
        
        console.log('üìç Estado final clases:', this.gameTitle.className);
        
        // Mostrar botones con animaci√≥n
        if (this.menuOptions) {
            this.menuOptions.classList.remove('hidden');
            this.menuOptions.classList.add('visible');
        }
        
        // Disparar evento de men√∫ listo
        document.dispatchEvent(new CustomEvent('menuTransitionComplete'));
        console.log('‚ú® Transiciones del men√∫ completadas');
    }
    
    // M√©todo para forzar activar transiciones (fallback)
    forceActivate() {
        if (!this.isInitialized) {
            console.log('‚ö° Forzando activaci√≥n de transiciones del men√∫');
            this.activateTransitions();
        }
    }
}

// Inicializar el gestor de transiciones DESPU√âS de que los m√≥dulos est√©n cargados
document.addEventListener('modulesReady', () => {
    console.log('üé≠ M√≥dulos listos, inicializando MenuTransitionManager...');
    window.menuTransitionManager = new MenuTransitionManager();
    
    // Fallback: forzar activaci√≥n si toma demasiado tiempo
    setTimeout(() => {
        if (window.menuTransitionManager && !window.menuTransitionManager.isInitialized) {
            console.log('‚è∞ Timeout alcanzado, forzando activaci√≥n de transiciones');
            window.menuTransitionManager.forceActivate();
        }
    }, 5000);
});

// Fallback para casos donde no se usen m√≥dulos din√°micos
document.addEventListener('DOMContentLoaded', () => {
    // Solo inicializar si no se ha inicializado ya con modulesReady
    setTimeout(() => {
        if (!window.menuTransitionManager) {
            console.log('üé≠ Fallback: Inicializando MenuTransitionManager desde DOMContentLoaded...');
            window.menuTransitionManager = new MenuTransitionManager();
        }
    }, 1000);
});
